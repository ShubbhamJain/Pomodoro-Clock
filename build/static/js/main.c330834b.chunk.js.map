{"version":3,"sources":["components/SetTimer.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["SetTimer","className","id","this","props","type","onClick","handleClick","value","React","Component","Timer","mode","time","Controls","active","handlePlayPause","handleReset","App","handleSetTimers","inc","state","newValue","setState","sessionValue","breakValue","clearInterval","pomodoro","touched","setInterval","audio","currentTime","pause","convertMilliseconds","ms","p","unit","pattern","arrayPattern","split","clock","minutes","Math","floor","seconds","addUnitToClock","val","length","push","i","j","match","join","bind","prevProps","prevState","promise","play","undefined","catch","playbackRate","preload","src","ref","av","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.c330834b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass SetTimer extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"setTimer\">\r\n        <div id={`${this.props.type}-label`}>\r\n          {this.props.type === \"session\" ? \"Session \" : \"Break \"}Length\r\n        </div>\r\n        <div className=\"setTimer-controls\">\r\n          <button\r\n            id={`${this.props.type}-decrement`}\r\n            onClick={() =>\r\n              this.props.handleClick(false, `${this.props.type}Value`)\r\n            }\r\n          >\r\n            &darr;\r\n          </button>\r\n          <div id={`${this.props.type}-length`}>{this.props.value}</div>\r\n          <button\r\n            id={`${this.props.type}-increment`}\r\n            onClick={() =>\r\n              this.props.handleClick(true, `${this.props.type}Value`)\r\n            }\r\n          >\r\n            &uarr;\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SetTimer;\r\n","import React from \"react\";\r\n\r\nclass Timer extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"timer\">\r\n        <h2 id=\"timer-label\">\r\n          {this.props.mode === \"session\" ? \"Session\" : \"Break\"}\r\n        </h2>\r\n        <h2 id=\"time-left\">{this.props.time}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\nimport \"./scss/App.scss\";\nimport SetTimer from \"./components/SetTimer\";\nimport Timer from \"./components/Timer\";\n\nconst Controls = ({ active, handlePlayPause, handleReset }) => (\n  <div id=\"controls\">\n    <button id=\"start_stop\" onClick={handlePlayPause}>\n      {active ? <span>&#10074;&#10074;</span> : <span>&#9658;</span>}\n    </button>\n    <button id=\"reset\" onClick={handleReset}>\n      &#8635;\n    </button>\n  </div>\n);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      breakValue: 5,\n      sessionValue: 25,\n      mode: \"session\",\n      time: 25 * 60 * 1000,\n      active: false,\n      touched: false,\n    };\n\n    this.handleSetTimers = this.handleSetTimers.bind(this);\n\n    this.handleReset = this.handleReset.bind(this);\n\n    this.handlePlayPause = this.handlePlayPause.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.time === 0 && prevState.mode === \"session\") {\n      this.setState({\n        time: this.state.breakValue * 60 * 1000,\n        mode: \"break\",\n      });\n      this.audio.pause();\n      this.audio.currentTime = 0;\n      let promise = this.audio.play();\n      if (promise !== undefined) promise.catch(function () {});\n      this.audio.playbackRate = 2;\n    }\n    if (prevState.time === 0 && prevState.mode === \"break\") {\n      this.setState({\n        time: this.state.sessionValue * 60 * 1000,\n        mode: \"session\",\n      });\n      this.audio.pause();\n      this.audio.currentTime = 0;\n      let promise = this.audio.play();\n      if (promise !== undefined) promise.catch(function () {});\n      this.audio.playbackRate = 2;\n    }\n  }\n\n  handleSetTimers = (inc, type) => {\n    if (this.state.active === true && (inc || !inc)) return;\n    if (this.state[type] === 60 && inc) return;\n    if (this.state[type] === 1 && !inc) return;\n    let newValue = this.state[type] + (inc ? 1 : -1);\n    if (type === \"sessionValue\") {\n      this.setState({\n        sessionValue: newValue,\n        mode: \"session\",\n        time: newValue * 60 * 1000,\n      });\n    }\n    if (type === \"breakValue\") {\n      this.setState({\n        breakValue: newValue,\n        mode: \"break\",\n        time: newValue * 60 * 1000,\n      });\n    }\n  };\n\n  handlePlayPause = () => {\n    if (this.state.active) {\n      clearInterval(this.pomodoro);\n      this.setState({\n        active: false,\n      });\n    } else {\n      if (this.state.touched) {\n        this.pomodoro = setInterval(() => {\n          this.setState({\n            time: this.state.time - 1000,\n          });\n        }, 1000);\n        this.setState({\n          active: true,\n        });\n      } else {\n        this.setState(\n          {\n            time: this.state.sessionValue * 60 * 1000,\n            active: true,\n            touched: true,\n            mode: \"session\",\n          },\n          () =>\n            (this.pomodoro = setInterval(() => {\n              this.setState({\n                time: this.state.time - 1000,\n              });\n            }, 1000))\n        );\n      }\n    }\n  };\n\n  handleReset = () => {\n    this.setState({\n      breakValue: 5,\n      sessionValue: 25,\n      time: 25 * 60 * 1000,\n      mode: \"session\",\n      active: false,\n      touched: false,\n    });\n    clearInterval(this.pomodoro);\n    this.audio.currentTime = 0;\n    this.audio.pause();\n  };\n\n  convertMilliseconds = (ms, p) => {\n    let pattern = p;\n    let arrayPattern = pattern.split(\":\");\n    let clock = [];\n    let minutes = Math.floor(ms / 60000);\n    let seconds = Math.floor(((ms % 360000) % 60000) / 1000);\n\n    const createClock = (unit) => {\n      if (pattern.match(unit)) {\n        if (unit.match(/mm/)) {\n          addUnitToClock(minutes, unit);\n        }\n        if (unit.match(/ss/)) {\n          addUnitToClock(seconds, unit);\n        }\n      }\n    };\n    function addUnitToClock(val, unit) {\n      if (val < 10 && unit.length === 2) {\n        val = \"0\" + val;\n      }\n      clock.push(val);\n    }\n    for (var i = 0, j = arrayPattern.length; i < j; i++) {\n      createClock(arrayPattern[i]);\n    }\n    return clock.join(\":\");\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Pomodoro Clock</h1>\n\n        <div id=\"settings\">\n          <SetTimer\n            type=\"break\"\n            value={this.state.breakValue}\n            handleClick={this.handleSetTimers}\n          />\n          <SetTimer\n            type=\"session\"\n            value={this.state.sessionValue}\n            handleClick={this.handleSetTimers}\n          />\n        </div>\n\n        <div className=\"timeFunction\">\n          <Timer\n            mode={this.state.mode}\n            time={this.convertMilliseconds(this.state.time, \"mm:ss\")}\n          />\n\n          <Controls\n            active={this.state.active}\n            handlePlayPause={this.handlePlayPause}\n            handleReset={this.handleReset}\n          />\n\n          <audio\n            id=\"beep\"\n            type=\"audio/mp3\"\n            preload=\"none\"\n            src=\"https://s3-us-west-1.amazonaws.com/benjaminadk/Data+synth+beep+high+and+sweet.mp3\"\n            ref={(av) => (this.audio = av)}\n          ></audio>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}